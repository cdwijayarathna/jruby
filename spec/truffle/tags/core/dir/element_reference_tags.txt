fails:Dir.[] raises an Encoding::CompatibilityError if the argument encoding is not compatible with US-ASCII
fails:Dir.[] calls #to_path to convert a pattern
fails:Dir.[] splits the string on \0 if there is only one string given
fails:Dir.[] matches non-dotfiles with '*'
fails:Dir.[] returns empty array when empty pattern provided
fails:Dir.[] matches regexp special +
fails:Dir.[] matches regexp special *
fails:Dir.[] matches regexp special ?
fails:Dir.[] matches regexp special |
fails:Dir.[] matches regexp special ^
fails:Dir.[] matches regexp special $
fails:Dir.[] matches regexp special (
fails:Dir.[] matches regexp special )
fails:Dir.[] matches regexp special [
fails:Dir.[] matches regexp special ]
fails:Dir.[] matches regexp special {
fails:Dir.[] matches regexp special }
fails:Dir.[] matches paths with glob patterns
fails:Dir.[] matches dotfiles with '.*'
fails:Dir.[] matches non-dotfiles with '*<non-special characters>'
fails:Dir.[] matches dotfiles with '.*<non-special characters>'
fails:Dir.[] matches files with any ending with '<non-special characters>*'
fails:Dir.[] matches files with any middle with '<non-special characters>*<non-special characters>'
fails:Dir.[] handles directories with globs
fails:Dir.[] matches files with multiple '*' special characters
fails:Dir.[] matches non-dotfiles in the current directory with '**'
fails:Dir.[] matches dotfiles in the current directory with '.**'
fails:Dir.[] recursively matches any nondot subdirectories with '**/'
fails:Dir.[] recursively matches any subdirectories including ./ and ../ with '.**/'
fails:Dir.[] matches a single character except leading '.' with '?'
fails:Dir.[] accepts multiple '?' characters in a pattern
fails:Dir.[] matches any characters in a set with '[<characters>]'
fails:Dir.[] matches any characters in a range with '[<character>-<character>]'
fails:Dir.[] matches any characters except those in a set with '[^<characters>]'
fails:Dir.[] matches any characters except those in a range with '[^<character>-<character]'
fails:Dir.[] matches any one of the strings in a set with '{<string>,<other>,...}'
fails:Dir.[] matches a set '{<string>,<other>,...}' which also uses a glob
fails:Dir.[] accepts string sets with empty strings with {<string>,,<other>}
fails:Dir.[] matches dot or non-dotfiles with '{,.}*'
fails:Dir.[] respects the order of {} expressions, expanding left most first
fails:Dir.[] respects the optional nested {} expressions
fails:Dir.[] matches special characters by escaping with a backslash with '\<character>'
fails:Dir.[] recursively matches directories with '**/<characters>'
fails:Dir.[] preserves the separator between directory components
fails:Dir.[] ignores matching through directories that doen't exist
fails:Dir.[] ignores matching only directories under an nonexistant path
fails:Dir.[] matches UTF-8 paths
fails:Dir.[] calls #to_path to convert multiple patterns
fails:Dir.[] matches multiple recursives
fails:Dir.[] ignores symlinks
fails:Dir.[] returns Strings in the encoding of the pattern
